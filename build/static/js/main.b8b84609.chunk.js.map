{"version":3,"sources":["components/CSVUpload.jsx","components/FormInput.jsx","components/DataForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CSVUpload","ref","this","props","buttonRef","onFileLoad","handleOnFileLoad","onError","handleOnError","noClick","noDrag","config","header","onRemoveFile","handleOnRemoveFile","file","className","type","onClick","handleOpenDialog","name","Component","FormInput","inputData","placeholder","value","key","onChange","changeHandler","DataForm","inputs","map","input","index","onInputChange","App","React","createRef","state","csvData","isSubmitted","isClientError","isServerError","isLoading","serverErrorMsg","clientErrorMsg","successMsg","data","setState","entry","e","current","open","err","inputElem","reason","console","log","inputChange","event","find","target","onFormSubmit","isFormValid","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","status","message","numberOfFilledInputs","filter","length","src","alt","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b8b84609.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { CSVReader } from \"react-papaparse\";\nimport \"./csv-upload.scss\";\n\nexport default class CSVUpload extends Component {\n    render() {\n        return (\n            <CSVReader\n                ref={this.props.buttonRef}\n                onFileLoad={this.props.handleOnFileLoad}\n                onError={this.handleOnError}\n                noClick\n                noDrag\n                config={{ header: true }}\n                onRemoveFile={this.props.handleOnRemoveFile}\n            >\n                {({ file }) => (\n                    <aside>\n                        <button\n                            className=\"upload-btn\"\n                            type=\"button\"\n                            onClick={this.props.handleOpenDialog}\n                        >\n                            Upload File\n                        </button>\n                        <div className=\"file-name-display\">\n                            {file && file.name}\n                        </div>\n                    </aside>\n                )}\n            </CSVReader>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./form-input.scss\";\n\nclass FormInput extends Component {\n    render() {\n        const { inputData } = this.props;\n        return (\n            <input\n                name={inputData.name}\n                type={inputData.type}\n                placeholder={inputData.placeholder}\n                value={inputData.value}\n                key={inputData.key}\n                onChange={this.props.changeHandler}\n            ></input>\n        );\n    }\n}\nexport default FormInput;\n","import React, { Component } from \"react\";\nimport \"./data-form.scss\";\nimport FormInput from \"./FormInput\";\n\nclass DataForm extends Component {\n    render() {\n        const inputs = this.props.inputs.map((input, index) => (\n            <FormInput\n                inputData={input}\n                key={input.name}\n                changeHandler={this.props.onInputChange}\n            />\n        ));\n        return <div className=\"dataForm\">{inputs}</div>;\n    }\n}\nexport default DataForm;\n","import React, { Component } from \"react\";\nimport CSVUpload from \"./components/CSVUpload\";\nimport DataForm from \"./components/DataForm\";\nimport \"./app.scss\";\n\nexport default class App extends Component {\n    buttonRef = React.createRef();\n    inputs = [\n        {\n            name: \"appKey\",\n            type: \"text\",\n            placeholder: \"Please insert appKey here...\",\n            value: \"\",\n        },\n        {\n            name: \"secretKey\",\n            type: \"text\",\n            placeholder: \"Please insert secretKey here...\",\n            value: \"\",\n        },\n        {\n            name: \"email\",\n            type: \"email\",\n            placeholder: \"Please enter your email...\",\n            value: \"\",\n        },\n    ];\n    state = {\n        inputs: this.inputs,\n        csvData: [],\n        isSubmitted: false,\n        isClientError: false,\n        isServerError: false,\n        isLoading: false,\n        serverErrorMsg: \"\",\n        clientErrorMsg: \"\",\n        successMsg: \"Success! Look out for a confirmation email!\",\n    };\n\n    handleOnFileLoad = (data) => {\n        this.setState({\n            csvData: data.map((entry) => entry.data),\n        });\n    };\n\n    handleOpenDialog = (e) => {\n        if (this.buttonRef.current) {\n            this.buttonRef.current.open(e);\n        }\n    };\n\n    handleOnError = (err, file, inputElem, reason) => {\n        console.log(err);\n    };\n\n    inputChange = (event) => {\n        const inputs = [...this.state.inputs];\n        inputs.find((input) => input.name === event.target.name).value =\n            event.target.value;\n        this.setState({ inputs: inputs });\n    };\n\n    isFormValid() {\n        let numberOfFilledInputs = this.state.inputs.filter(\n            (input) => input.value !== \"\"\n        );\n        if (\n            this.state.inputs.length === numberOfFilledInputs.length &&\n            this.state.csvData.length !== 0\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    onFormSubmit = (event) => {\n        this.setState({\n            isSubmitted: false,\n            isServerError: false,\n            isClientError: false,\n        });\n        if (this.isFormValid()) {\n            this.setState({ isLoading: true });\n            fetch(\"https://ps-tpr2map.herokuapp.com/create-orders\", {\n                method: \"POST\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(this.state),\n            })\n                .then((res) => res.json())\n                .then((res) => {\n                    res.status === 200\n                        ? this.setState({ isSubmitted: true, isLoading: false })\n                        : this.setState({\n                              serverErrorMsg: res.message,\n                              isServerError: true,\n                              isLoading: false,\n                          });\n                });\n        } else {\n            this.setState({\n                isClientError: true,\n                clientErrorMsg: \"One or more of the fields are missing...\",\n            });\n        }\n    };\n\n    render() {\n        const {\n            successMsg,\n            serverErrorMsg,\n            clientErrorMsg,\n            inputs,\n            isSubmitted,\n            isServerError,\n            isClientError,\n            isLoading,\n        } = this.state;\n        return (\n            <div className=\"app\">\n                <div className=\"logo-contianer\">\n                    <img\n                        className=\"yotpo-logo\"\n                        src={process.env.PUBLIC_URL + \"/yotpo-logo.png\"}\n                        alt=\"yotpo-logo\"\n                    />\n                </div>\n                <DataForm onInputChange={this.inputChange} inputs={inputs} />\n                <CSVUpload\n                    handleOnFileLoad={this.handleOnFileLoad}\n                    handleOpenDialog={this.handleOpenDialog}\n                    handleOnError={this.handleOnError}\n                    buttonRef={this.buttonRef}\n                />\n                <div className=\"controls-container\">\n                    <button\n                        className=\"submit-btn\"\n                        onClick={this.onFormSubmit}\n                        disabled={this.isLoading}\n                        type=\"submit\"\n                    >\n                        Submit\n                    </button>\n                </div>\n                {isSubmitted ? (\n                    <p className=\"success-msg\">{successMsg}</p>\n                ) : null}\n                {isServerError ? (\n                    <p className=\"error-msg\">{serverErrorMsg}</p>\n                ) : null}\n                {isClientError ? (\n                    <p className=\"error-msg\">{clientErrorMsg}</p>\n                ) : null}\n                {isLoading ? (\n                    <div className=\"loader-container\">\n                        <img\n                            src={process.env.PUBLIC_URL + \" /loader.gif\"}\n                        ></img>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}